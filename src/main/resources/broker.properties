# AWS (SQS) Credentials
access.key=AKIAT6XNKD4OPD5RRPR4
secret.key=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

# IBM WebsphereMQ
ibm.queueManager=QM1
ibm.hostName=ec2-54-154-52-18.eu-west-1.compute.amazonaws.com
# transportType=1 means that a TCP/IP connection is used to connect to the MQ broker
ibm.transportType=1
ibm.port=port=1414
ibm.protocols=TLSv1.2
ibm.channel=DEV.APP.SVRCONN
ibm.certAlias=client
ibm.ciphersuite=SSL_ECDHE_RSA_WITH_AES_256_CBC_SHA384
# Tuning IBM
ibm.concurrentConsumers=2
ibm.maxConcurrentConsumers=10
ibm.maxMessagesPerTask=100
ibm.receiveTimeout=500
ibm.idleConsumerLimit=2

# SSL Configuration - Uncomment the following lines to use SSL-->
ssl.key-store-type=JKS
ssl.key-store-provider=IBMJCE
ssl.keystore.password.secure=changeit
ssl.keystore=./client.jks
ssl.truststore=./server-chain.jks

# IBM WebsphereMQ queues
ibm.requestqueue=DEV.QUEUE.1
ibm.responsequeue=DEV.QUEUE.2

# See https://www.ibm.com/support/knowledgecenter/SSFKSJ_8.0.0/com.ibm.mq.dev.doc/q113220_.htm -> IBM's ANY_TLS12 means any of:

# TLS_RSA_WITH_AES_128_CBC_SHA256
# TLS_RSA_WITH_AES_256_CBC_SHA256
# ECDHE_ECDSA_AES_128_CBC_SHA256
# ECDHE_ECDSA_AES_256_CBC_SHA384
# ECDHE_RSA_AES_128_CBC_SHA256
# ECDHE_RSA_AES_256_CBC_SHA384

# There is mapping between IBM & Oracle etc JVMs but use IBM's Java in the client, for an easy life
# curl -o ibm-java-x86_64-sdk-8.0-6.6.bin http://public.dhe.ibm.com/ibmdl/export/pub/systems/cloud/runtimes/java/8.0.6.6/linux/x86_64/ibm-java-x86_64-sdk-8.0-6.6.bin

# Test message {"type":"login", "payload":{"name":"giles", "city":"Altrincham"}}

